// Write a function to convert a name into initials. This kata strictly takes two words with one space in between them.
// The output should be two capital letters with a dot seperating them.

// It should look like this:
// Sam Harris => S.H
// Patrick Feeney => P.F

// Solution 1
function abbrevName(name) {
  abbr = name.split(' ');
  return abbr[0][0].toUpperCase() + '.' + abbr[1][0].toUpperCase();
}

// Solution 2
function abbrevName(name){
  return name.split(' ').map(x => x[0].toUpperCase()).join('.');
}

// CW Tests
Test.assertEquals(abbrevName("Sam Harris"), "S.H");
Test.assertEquals(abbrevName("Patrick Feenan"), "P.F");
Test.assertEquals(abbrevName("Evan Cole"), "E.C");
Test.assertEquals(abbrevName("P Favuzzi"), "P.F");
Test.assertEquals(abbrevName("David Mendieta"), "D.M");
 
 * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * 
 
// Create a function finalGrade, which calculates the final grade of a student depending on two parameters: a grade for the exam and a number of completed projects.
// This function should take two arguments: exam - grade for exam (from 0 to 100); projects - number of completed projects (from 0 and above);
// This function should return a number (final grade). There are four types of final grades:

// 100, if a grade for the exam is more than 90 or if a number of completed projects more than 10.
// 90, if a grade for the exam is more than 75 and if a number of completed projects is minimum 5.
// 75, if a grade for the exam is more than 50 and if a number of completed projects is minimum 2.
// 0, in other cases

// Solution 1
function finalGrade (exam, projects) {
  if(exam > 90 || projects > 10) return 100;
  if(exam > 75 & projects >= 5) return 90;
  if(exam > 50 & projects >= 2) return 75;
  return 0;
}

// Solution 2 
const finalGrade = (exam, projects) => exam > 90 || projects > 10 ? 100 : exam > 75 && projects >= 5 ? 90 : exam > 50 && projects >= 2 ? 75 : 0;

// CW Tests
describe("Sample tests", function(){
  Test.assertEquals(finalGrade(100, 12), 100);
  Test.assertEquals(finalGrade(85, 5), 90);
});

* - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - *

// Write a function to split a string and convert it into an array of words.

// Solution
const stringToArray = string => string.split(' ');

// CW Tests
Test.expect(stringToArray("Robin Singh"), ["Robin", "Singh"]);
Test.expect(stringToArray("I love arrays they are my favorite"), ["I", "love", "arrays", "they", "are", "my", "favorite"]);

* - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - *

// Complete the functionthat removes duplicates from a list of numbers.
// The order of the sequence needs to stay the same.

// Solution 1
function distinct(a) {
 let foo = new Set(a);
 let bar = foo.values();
 return Array.from(bar);
}

// Solution 2
function distinct(a){
let newArray = [];

  for(let i=0; i < a.length; i++){
    if(newArray.indexOf(a[i]) === -1){
      newArray.push(a[i]);
    }
  }

  return newArray
}

// CW Tests
Test.assertSimilar(distinct([1]), [1]);
Test.assertSimilar(distinct([1,2]), [1,2]);
Test.assertSimilar(distinct([1,1,2]), [1,2]);

* - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - *
