
* - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * 

// I'm new to coding and now I want to get the sum of two arrays...actually the sum of all their elements. I'll appreciate for
// your help.
// P.S. Each array includes only integer numbers. Output is a number too.


// Solution 1
function arrayPlusArray(arr1, arr2) {
  return arr1.reduce((a, b) => a + b, 0) + arr2.reduce((a, b) => a + b, 0);
}

// Solution 2 - Refactored 
function arrayPlusArray(arr1, arr2) {
  return arr1.concat(arr2).reduce((a, b) => a + b);
}


// CW Sample Tests
Test.describe("Basic tests",function(){
  Test.assertEquals(arrayPlusArray([1, 2, 3], [4, 5, 6]), 21);
  Test.assertEquals(arrayPlusArray([-1, -2, -3], [-4, -5, -6]), -21);
  Test.assertEquals(arrayPlusArray([0, 0, 0], [4, 5, 6]), 15);
  Test.assertEquals(arrayPlusArray([100, 200, 300], [400, 500, 600]), 2100);
})

* - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * 

// There is a bus moving in the city, and it takes and drop some people in each bus stop.

// You are provided with a list (or array) of integer arrays (or tuples). Each integer array has two items which represent
// number of people get into bus (The first item) and number of people get off the bus (The second item) in a bus stop.

// Your task is to return number of people who are still in the bus after the last bus station (after the last array). Even
// though it is the last bus stop, the bus is not empty and some people are still in the bus, and they are probably sleeping
// there :D

// Take a look on the test cases.

// Please keep in mind that the test cases ensure that the number of people in the bus is always >= 0. So the return integer
// can't be negative.

// The second value in the first integer array is 0, since the bus is empty in the first bus stop.


// Solution 1
var number = function(busStops){
  let final = 0;
  for (let i = 0; i < busStops.length; i++) {
    final += busStops[i][0];
    final -= busStops[i][1];
  }
  
  return final;
}

// Solution 2 - Using .reduce
const number = busStops => busStops.reduce((n, [on, off]) => n + on - off, 0);


// Solution 3 - Using .map
var number = (busStops) => {
  let final = 0;
  busStops.map( people => people[0] - people[1] ).map( people => final += people );
  return final;
}

// CW Sample Tests
Test.assertEquals(number([[10,0],[3,5],[5,8]]),5);
Test.assertEquals(number([[3,0],[9,1],[4,10],[12,2],[6,1],[7,10]]),17);
Test.assertEquals(number([[3,0],[9,1],[4,8],[12,2],[6,1],[7,8]]),21);

* - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * 

// Complete the solution so that it reverses the string value passed into it.

// Solution
function solution(str){
  return str.split('').reverse().join('');
}

// CW Sample Test
Test.expect(solution('world') == 'dlrow')

* - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * 

// All of the animals are having a feast! Each animal is bringing one dish. There is just one rule: the dish must start and 
// end with the same letters as the animal's name. For example, the great blue heron is bringing garlic naan and the chickadee
// is bringing chocolate cake.

// Write a function feast that takes the animal's name and dish as arguments and returns true or false to indicate whether the
// beast is allowed to bring the dish to the feast.

// Assume that beast and dish are always lowercase strings, and that each has at least two letters. beast and dish may contain
// hyphens and spaces, but these will not appear at the beginning or end of the string. They will not contain numerals.


// Solution 1
function feast(beast, dish) {
  return beast[0] === dish[0] && beast[beast.length - 1] === dish[dish.length - 1]
}

// Solution 2
function feast(beast, dish) {
 return beast.substr(0, 1) === dish.substr(0, 1) && beast.substr(-1, 1) === dish.substr(-1, 1) 
}

// CW Sample Tests
Test.assertEquals(feast("great blue heron", "garlic naan"), true)
Test.assertEquals(feast("chickadee", "chocolate cake"), true)
Test.assertEquals(feast("brown bear", "bear claw"), false)

* - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * 

// Simple, remove the spaces from the string, then return the resultant string.

// Solution 1
function noSpace(x){
  return x.split(' ').join('');
}

// Solution 2
function noSpace(x){
  return x.replace(/\s/g, '');
}

// CW Sample Tests
Test.describe("Example tests",_=>{
Test.assertEquals(noSpace('8 j 8   mBliB8g  imjB8B8  jl  B'), '8j8mBliB8gimjB8B8jlB');
Test.assertEquals(noSpace('8 8 Bi fk8h B 8 BB8B B B  B888 c hl8 BhB fd'), '88Bifk8hB8BB8BBBB888chl8BhBfd'); 
Test.assertEquals(noSpace('8aaaaa dddd r     '), '8aaaaaddddr'); 
});

* - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * 

// Can you find the needle in the haystack?
// Write a function findNeedle() that takes an array full of junk but containing one "needle"
// After your function finds the needle it should return a message (as a string) that says:
// "found the needle at position " plus the index it found the needle.

// Solution
function findNeedle(haystack) {
  return "found the needle at position " + haystack.indexOf('needle') + ''
}

// Solution 2
const findNeedle = haystack => `found the needle at position ${haystack.indexOf('needle')}`;

// CW Sample Tests
var haystack_1 = ['3', '123124234', undefined, 'needle', 'world', 'hay', 2, '3', true, false];
var haystack_2 = ['283497238987234', 'a dog', 'a cat', 'some random junk', 'a piece of hay', 'needle', 'something somebody lost a while ago'];
var haystack_3 = [1,2,3,4,5,6,7,8,8,7,5,4,3,4,5,6,67,5,5,3,3,4,2,34,234,23,4,234,324,324,'needle',1,2,3,4,5,5,6,5,4,32,3,45,54];

Test.assertEquals(findNeedle(haystack_1), 'found the needle at position 3')
Test.assertEquals(findNeedle(haystack_2), 'found the needle at position 5') 
Test.assertEquals(findNeedle(haystack_3), 'found the needle at position 30')

* - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * 

// Write a function to convert a name into initials. This kata strictly takes two words with one space in between them.
// The output should be two capital letters with a dot seperating them.

// It should look like this:
// Sam Harris => S.H
// Patrick Feeney => P.F

// Solution 1
function abbrevName(name) {
  abbr = name.split(' ');
  return abbr[0][0].toUpperCase() + '.' + abbr[1][0].toUpperCase();
}

// Solution 2
function abbrevName(name){
  return name.split(' ').map(x => x[0].toUpperCase()).join('.');
}

// CW Tests
Test.assertEquals(abbrevName("Sam Harris"), "S.H");
Test.assertEquals(abbrevName("Patrick Feenan"), "P.F");
Test.assertEquals(abbrevName("Evan Cole"), "E.C");
Test.assertEquals(abbrevName("P Favuzzi"), "P.F");
Test.assertEquals(abbrevName("David Mendieta"), "D.M");
 
 * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * 
 
// Create a function finalGrade, which calculates the final grade of a student depending on two parameters: a grade for the
// exam and a number of completed projects.
// This function should take two arguments: exam - grade for exam (from 0 to 100); projects - number of completed projects
// (from 0 and above);
// This function should return a number (final grade). There are four types of final grades:

// 100, if a grade for the exam is more than 90 or if a number of completed projects more than 10.
// 90, if a grade for the exam is more than 75 and if a number of completed projects is minimum 5.
// 75, if a grade for the exam is more than 50 and if a number of completed projects is minimum 2.
// 0, in other cases

// Solution 1
function finalGrade (exam, projects) {
  if(exam > 90 || projects > 10) return 100;
  if(exam > 75 & projects >= 5) return 90;
  if(exam > 50 & projects >= 2) return 75;
  return 0;
}

// Solution 2 
const finalGrade = (exam, projects) => exam > 90 || projects > 10 ? 100 : exam > 75 && projects >= 5 ? 90 : exam > 50 && projects >= 2 ? 75 : 0;

// CW Tests
describe("Sample tests", function(){
  Test.assertEquals(finalGrade(100, 12), 100);
  Test.assertEquals(finalGrade(85, 5), 90);
});

* - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - *

// Write a function to split a string and convert it into an array of words.

// Solution
const stringToArray = string => string.split(' ');

// CW Tests
Test.expect(stringToArray("Robin Singh"), ["Robin", "Singh"]);
Test.expect(stringToArray("I love arrays they are my favorite"), ["I", "love", "arrays", "they", "are", "my", "favorite"]);

* - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - *

// Complete the functionthat removes duplicates from a list of numbers.
// The order of the sequence needs to stay the same.

// Solution 1
function distinct(a) {
 let foo = new Set(a);
 let bar = foo.values();
 return Array.from(bar);
}

// Solution 2
function distinct(a){
let newArray = [];

  for(let i=0; i < a.length; i++){
    if(newArray.indexOf(a[i]) === -1){
      newArray.push(a[i]);
    }
  }

  return newArray
}

// CW Tests
Test.assertSimilar(distinct([1]), [1]);
Test.assertSimilar(distinct([1,2]), [1,2]);
Test.assertSimilar(distinct([1,1,2]), [1,2]);

* - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - *

// Your friend invites you out to a cool floating pontoon around 1km off the beach. Among other things, the pontoon has a huge
// slide that drops you out right into the ocean, a small way from a set of stairs used to climb out.

// As you plunge out of the slide into the water, you see a shark hovering in the darkness under the pontoon... Crap!

// You need to work out if the shark will get to you before you can get to the pontoon. To make it easier... as you do the
// mental calculations in the water you either freeze when you realise you are dead, or swim when you realise you can make it!

// You are given 5 variables: sharkDistance = distance the shark needs to cover to eat you in metres, sharkSpeed = how fast it
// can move in metres/second, pontoonDistance = how far you need to swim to safety in metres, youSpeed = how fast you can swim
// in metres/second, dolphin = a boolean, if true, you can half the swimming speed of the shark as the dolphin will attack it.

// If you make it, return "Alive!", if not, return "Shark Bait!".


// Solution 1
function shark(pontoonDistance, sharkDistance, youSpeed, sharkSpeed, dolphin){
  if (dolphin) {
     sharkSpeed /= 2
   }
  
  return pontoonDistance / youSpeed < sharkDistance / sharkSpeed ? "Alive!" : "Shark Bait!";
}

// CW Tests
Test.describe("Example tests",_=>{
Test.assertEquals(shark(12, 50, 4, 8, true), "Alive!");
Test.assertEquals(shark(7, 55, 4, 16, true), "Alive!");
Test.assertEquals(shark(24, 0, 4, 8, true), "Shark Bait!");
});

* - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - *

// Get the number n (n>0) to return the reversed sequence from n to 1.
// Example : n=5 >> [5,4,3,2,1]

// Solution 1
const reverseSeq = n => {
  let nums = [];
  for (let i = n; i > 0; i--) {
    nums.push(i);
  };
  
  return nums;
};

// CW Tests
const { assert } = require("chai");

describe("reverseSeq", function() {
  it("Sample Test", function() {
    assert.deepEqual(reverseSeq(5), [5, 4, 3, 2, 1]);
  });
});

* - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - *

// Your task is to create a function that does four basic mathematical operations.
// The function should take three arguments - operation(string/char), value1(number), value2(number).
// The function should return result of numbers after applying the chosen operation.

// Solution 1 (Voted Best Practice on CW *yay!*)
function basicOp(operation, value1, value2) {
    switch (operation) {
        case '+':
            return value1 + value2;
        case '-':
            return value1 - value2;
        case '*':
            return value1 * value2;
        case '/':
            return value1 / value2;
        default:
            return 0;
    }
}

// CW Tests
console.log("Basic tests\n");
Test.assertSimilar(basicOp('+', 4, 7), 11);
Test.assertSimilar(basicOp('-', 15, 18), -3);
Test.assertSimilar(basicOp('*', 5, 5), 25);
Test.assertSimilar(basicOp('/', 49, 7), 7);

* - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - *

// Very simple, given a number, find its opposite.
// Examples:
// 1: -1
// 14: -14
// -34: 34
// But can you do it in 1 line of code and without any conditionals?

// Solution 1 (Voted best pracice in CW btw :D )
function opposite(number) {
  return (-number); 
}

// Sample CW Tests
Test.assertEquals(opposite(1), -1,)

* - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - * - 8 - *
